<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[paulcichonski.com blog]]></title>
  <link href="http://paulcichonski.com/atom.xml" rel="self"/>
  <link href="http://paulcichonski.com/"/>
  <updated>2014-02-01T14:04:26-08:00</updated>
  <id>http://paulcichonski.com/</id>
  <author>
    <name><![CDATA[Paul Cichonski]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Meetup Talks]]></title>
    <link href="http://paulcichonski.com/blog/2014/02/01/recent-talks/"/>
    <updated>2014-02-01T11:00:00-08:00</updated>
    <id>http://paulcichonski.com/blog/2014/02/01/recent-talks</id>
    <content type="html"><![CDATA[<p>I had the opportunity to speak at two Meetups in January on the work I&rsquo;ve been doing for the past few months at <a href="http://www.lithium.com/">Lithium</a>. The first talk was at a new Meetup that Lithium started called <a href="http://www.meetup.com/CloudOps/">Cloudops</a> that is oriented towards engineers working devops roles in cloud environments. My talk was a short 15 minute talk (<a href="http://www.slideshare.net/PaulCichonski/cichonski-cloud-ops20140128">slides here</a>) covering strategies for building fault tolerant systems in cloud environments and my thoughts on how to monitor those systems. My favorite part of the talk was introducing <a href="http://en.wikipedia.org/wiki/OODA_loop">Boyd&rsquo;s OODA loop</a> as a process model for devops work. I&rsquo;ve dealt a lot with the OODA loop in my past role at <a href="http://www.nist.gov/">NIST</a> when we were trying to improve the process for <a href="http://csrc.nist.gov/publications/nistpubs/800-61rev2/SP800-61rev2.pdf">IT security incident handling</a> in the industry. I still think OODA is one of the better process models out there since it is abstract enough to remain relevant across many disciplines while still offering value in each individual domain that binds to it.</p>

<p>My second talk was at the <a href="http://www.meetup.com/CassandraSF/">Datastax Cassandra SF Meetup</a> hosted at <a href="http://disqus.com/">Disqus</a>. This talk (<a href="http://www.slideshare.net/PaulCichonski/cassandra-at-lithium">slides here</a>) was a bit more low-level and focused on how we have been using Cassandra at Lithium for the past six months as we move to a more service-oriented architecture internally. This talk was primarily focused on our use case, data model, and all of the issues we dealt with getting Cassandra into production. I also covered the strategy we used for migrating data from MySQL to Cassandra with zero downtime. Our migration strategy was heavily influenced by a Netflix <a href="http://techblog.netflix.com/2013/02/netflix-queue-data-migration-for-high.html">blog post</a> covering a migration from SimpleDB to Cassandra.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up Octopress on a new Machine]]></title>
    <link href="http://paulcichonski.com/blog/2013/11/10/setting-up-octopress-on-a-new-machine/"/>
    <updated>2013-11-10T20:46:00-08:00</updated>
    <id>http://paulcichonski.com/blog/2013/11/10/setting-up-octopress-on-a-new-machine</id>
    <content type="html"><![CDATA[<p>As soon as I got this blog up and running, the first thing I did was to completely screw up my <a href="http://octopress.org/">Octopress</a> install (apparently I did need all those files I deleted), thus rendering the entire site useless. As with anything &ldquo;tinkering&rdquo; related, this is fairly normal so it is also fairly normal to rebuild from scratch. Luckily, smart people have <a href="http://blog.zerosharp.com/clone-your-octopress-to-blog-from-two-places/">already figured out</a> how to do this.</p>

<p>The following steps outline how to setup a fresh Octopress install that connects to an existing <a href="http://pages.github.com/">Github Pages</a> repository (this builds on the zerosharp post with some updates based on recent changes in Octopress). <strong>These steps assume that the Github repository is fully up to date with all latest changes</strong></p>

<p>First you need to make sure that your <code>source</code> directory actually contains the <code>source/_posts</code> and the <code>stylesheets</code> folder. You also need to make sure .gitignore is not ignoring any of these (if there is a reason these should not be committed please let me know, I could not think of any).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>## This needs to happen on your first machine, for some reason they are ignored by default.
</span><span class='line'>cd source/
</span><span class='line'>git add _posts/ 
</span><span class='line'>git add stylesheets
</span><span class='line'>git commit -m "adding posts and stylesheets dir"
</span><span class='line'>git push origin source</span></code></pre></td></tr></table></div></figure>


<p>The remainder of the steps happen on your second machine. First clone the <code>source</code> branch</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone -b source git@github.com:username/username.github.io.git octopress
</span><span class='line'>cd octopress</span></code></pre></td></tr></table></div></figure>


<p>Next, install Octopress</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install bundler
</span><span class='line'>rbenv rehash    # If you use rbenv, rehash to be able to run the bundle command
</span><span class='line'>bundle install
</span><span class='line'>rake setup_github_pages</span></code></pre></td></tr></table></div></figure>


<p>The last command deleted the <code>_deploy</code> directory and re-added it. We don&rsquo;t want this because we want the latest changes from <code>_deploy</code> so we don&rsquo;t run into any nasty <code>[rejected]        master -&gt; master (non-fast-forward)</code> git errors because of an out-of-date branch.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rm -rf _deploy
</span><span class='line'>git clone git@github.com:username/username.github.io.git _deploy</span></code></pre></td></tr></table></div></figure>


<p>Octopress should now be setup, and the <code>source</code> dir should contain your up-to-date markdown. To test things out make a change to a post (or make a new post) then regenerate and deploy.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate
</span><span class='line'>rake deploy</span></code></pre></td></tr></table></div></figure>


<p>Your new changes should appear on your site. The only downside of this approach is that when you go back to your original machine and try to deploy, git will yell at you (i.e., non-fast-forward error) because the <code>_deploy</code> dir from that machine is now out of date. The best way to fix this is to remove it (see above) and re-clone it (see above). The other option is to edit the <code>octopress/RakeFile</code> and change the line: <code>system "git push origin #{deploy_branch}"</code> to <code>system "git push origin +#{deploy_branch}"</code> to force the deployment despite version mismatches (<strong>be sure to undo this change immediately after</strong>).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building this Blog with Octopress]]></title>
    <link href="http://paulcichonski.com/blog/2013/11/10/building-this-blog-with-octopress/"/>
    <updated>2013-11-10T15:14:00-08:00</updated>
    <id>http://paulcichonski.com/blog/2013/11/10/building-this-blog-with-octopress</id>
    <content type="html"><![CDATA[<p>I just setup this blog using <a href="http://octopress.org/">Octopress</a> as the page generation engine and <a href="http://pages.github.com/">Github Pages</a> to <strong>freely</strong> host the content. In total, it took me about four hours to get from start to first blog post, and that was mainly because my ruby environment on my dev machine was fairly messed up from mucking around six months ago.</p>

<p>This initial post is both a how-to for setting up a blog with Octopress/Github and quick cheat-sheet so I don&rsquo;t forget how I did things.</p>

<h2>Setup</h2>

<p>The <a href="http://octopress.org/docs/setup/">Octopress setup docs</a> are incredibly helpful, so I&rsquo;m not going to duplicate content explaining what everything means. Assuming ruby is correctly installed the setup commands are as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>## 1. Create personal github repo named "username.github.io", mine is "paulcichonski.github.io"
</span><span class='line'>## 2. Clone Octopress repo locally and setup directory structure
</span><span class='line'>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'>cd octopress
</span><span class='line'>rake install
</span><span class='line'>## 3. connect your local install with your git repo (see Octopress docs for more details: http://octopress.org/docs/deploying/github/)
</span><span class='line'>rake setup_github_pages</span></code></pre></td></tr></table></div></figure>


<p>The above commands will leave your &lsquo;/octopress&rsquo; dir in a state where you are ready to begin blogging. You can think of the &lsquo;/octopress&rsquo; dir as a container for all your blog content as well as the library for all the commands you need to push content to Github.</p>

<h2>Important Octopress Files and Directories</h2>

<p>The following files and directories comprise the essential building blocks for an Octopress site:</p>

<ul>
<li><strong>/octopress/_config.yml</strong>: Holds all the configuration for the site, Octopress uses this when generating your static HTML pages from markdown.</li>
<li><strong>/octopress/source/</strong> &ndash; This is the directory that includes all the content you actually edit, it syncs with the &lsquo;source&rsquo; branch of your github repository. Remember to always commit any changes made in this directory to your &lsquo;source&rsquo; branch. Running &ldquo;rake generate&rdquo; from the &lsquo;/octopress&rsquo; dir level will take the files in &lsquo;source&rsquo;, parse them in combination with your &lsquo;_config.yml&rsquo; file and generate static html content into the &lsquo;_deploy&rsquo; dir.</li>
<li><strong>/octopress/_deploy</strong> &ndash; This is the directory that Octopress will dynamically generate, it contains your actual website static HTML that people see. When you run &ldquo;rake deploy&rdquo; Octopress handles pushing all content from &lsquo;_deploy&rsquo; to the &lsquo;master&rsquo; branch of your github repo (i.e., the branch responsible for serving content).</li>
</ul>


<h2>Important Octopress Commands</h2>

<p>The following commands are the most useful for doing basic things with Octopress</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>## generates static html by parsing markdown in 'source' directory, using '\_config.yml' for configuration parameters
</span><span class='line'>rake generate
</span><span class='line'>## deploys all content in '\_deploy' to the 'master' branch on your github repo 
</span><span class='line'>rake deploy 
</span><span class='line'>## binds a webserver to localhost:4000 that serves pages from '\_deploy'; watches for changes in 'source' and auto-generates all changes into '\_deploy'. Use this for local development.
</span><span class='line'>rake preview </span></code></pre></td></tr></table></div></figure>


<p>That is it for now, still need to document how to perform development from multiple machines and how to rebuild your local development workstation if something goes wrong.</p>
]]></content>
  </entry>
  
</feed>
