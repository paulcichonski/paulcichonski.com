<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: blogging | paulcichonski.com blog]]></title>
  <link href="http://paulcichonski.com/blog/categories/blogging/atom.xml" rel="self"/>
  <link href="http://paulcichonski.com/"/>
  <updated>2014-02-01T14:18:16-08:00</updated>
  <id>http://paulcichonski.com/</id>
  <author>
    <name><![CDATA[Paul Cichonski]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setting Up Octopress on a new Machine]]></title>
    <link href="http://paulcichonski.com/blog/2013/11/10/setting-up-octopress-on-a-new-machine/"/>
    <updated>2013-11-10T20:46:00-08:00</updated>
    <id>http://paulcichonski.com/blog/2013/11/10/setting-up-octopress-on-a-new-machine</id>
    <content type="html"><![CDATA[<p>As soon as I got this blog up and running, the first thing I did was to completely screw up my <a href="http://octopress.org/">Octopress</a> install (apparently I did need all those files I deleted), thus rendering the entire site useless. As with anything &ldquo;tinkering&rdquo; related, this is fairly normal so it is also fairly normal to rebuild from scratch. Luckily, smart people have <a href="http://blog.zerosharp.com/clone-your-octopress-to-blog-from-two-places/">already figured out</a> how to do this.</p>

<p>The following steps outline how to setup a fresh Octopress install that connects to an existing <a href="http://pages.github.com/">Github Pages</a> repository (this builds on the zerosharp post with some updates based on recent changes in Octopress). <strong>These steps assume that the Github repository is fully up to date with all latest changes</strong></p>

<p>First you need to make sure that your <code>source</code> directory actually contains the <code>source/_posts</code> and the <code>stylesheets</code> folder. You also need to make sure .gitignore is not ignoring any of these (if there is a reason these should not be committed please let me know, I could not think of any).</p>

<p>```</p>

<h2>This needs to happen on your first machine, for some reason they are ignored by default.</h2>

<p>cd source/
git add _posts/
git add stylesheets
git commit -m &ldquo;adding posts and stylesheets dir&rdquo;
git push origin source
```</p>

<p>The remainder of the steps happen on your second machine. First clone the <code>source</code> branch</p>

<p><code>
git clone -b source git@github.com:username/username.github.io.git octopress
cd octopress
</code></p>

<p>Next, install Octopress</p>

<p><code>
gem install bundler
rbenv rehash    # If you use rbenv, rehash to be able to run the bundle command
bundle install
rake setup_github_pages
</code></p>

<p>The last command deleted the <code>_deploy</code> directory and re-added it. We don&rsquo;t want this because we want the latest changes from <code>_deploy</code> so we don&rsquo;t run into any nasty <code>[rejected]        master -&gt; master (non-fast-forward)</code> git errors because of an out-of-date branch.</p>

<p><code>
rm -rf _deploy
git clone git@github.com:username/username.github.io.git _deploy
</code></p>

<p>Octopress should now be setup, and the <code>source</code> dir should contain your up-to-date markdown. To test things out make a change to a post (or make a new post) then regenerate and deploy.</p>

<p><code>
rake generate
rake deploy
</code></p>

<p>Your new changes should appear on your site. The only downside of this approach is that when you go back to your original machine and try to deploy, git will yell at you (i.e., non-fast-forward error) because the <code>_deploy</code> dir from that machine is now out of date. The best way to fix this is to remove it (see above) and re-clone it (see above). The other option is to edit the <code>octopress/RakeFile</code> and change the line: <code>system "git push origin #{deploy_branch}"</code> to <code>system "git push origin +#{deploy_branch}"</code> to force the deployment despite version mismatches (<strong>be sure to undo this change immediately after</strong>).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building this Blog with Octopress]]></title>
    <link href="http://paulcichonski.com/blog/2013/11/10/building-this-blog-with-octopress/"/>
    <updated>2013-11-10T15:14:00-08:00</updated>
    <id>http://paulcichonski.com/blog/2013/11/10/building-this-blog-with-octopress</id>
    <content type="html"><![CDATA[<p>I just setup this blog using <a href="http://octopress.org/">Octopress</a> as the page generation engine and <a href="http://pages.github.com/">Github Pages</a> to <strong>freely</strong> host the content. In total, it took me about four hours to get from start to first blog post, and that was mainly because my ruby environment on my dev machine was fairly messed up from mucking around six months ago.</p>

<p>This initial post is both a how-to for setting up a blog with Octopress/Github and quick cheat-sheet so I don&rsquo;t forget how I did things.</p>

<h2>Setup</h2>

<p>The <a href="http://octopress.org/docs/setup/">Octopress setup docs</a> are incredibly helpful, so I&rsquo;m not going to duplicate content explaining what everything means. Assuming ruby is correctly installed the setup commands are as follows:</p>

<p>```</p>

<h2>1. Create personal github repo named &ldquo;username.github.io&rdquo;, mine is &ldquo;paulcichonski.github.io&rdquo;</h2>

<h2>2. Clone Octopress repo locally and setup directory structure</h2>

<p>git clone git://github.com/imathis/octopress.git octopress
cd octopress
rake install</p>

<h2>3. connect your local install with your git repo (see Octopress docs for more details: <a href="http://octopress.org/docs/deploying/github/">http://octopress.org/docs/deploying/github/</a>)</h2>

<p>rake setup_github_pages
```
The above commands will leave your &lsquo;/octopress&rsquo; dir in a state where you are ready to begin blogging. You can think of the &lsquo;/octopress&rsquo; dir as a container for all your blog content as well as the library for all the commands you need to push content to Github.</p>

<h2>Important Octopress Files and Directories</h2>

<p>The following files and directories comprise the essential building blocks for an Octopress site:</p>

<ul>
<li><strong>/octopress/_config.yml</strong>: Holds all the configuration for the site, Octopress uses this when generating your static HTML pages from markdown.</li>
<li><strong>/octopress/source/</strong> &ndash; This is the directory that includes all the content you actually edit, it syncs with the &lsquo;source&rsquo; branch of your github repository. Remember to always commit any changes made in this directory to your &lsquo;source&rsquo; branch. Running &ldquo;rake generate&rdquo; from the &lsquo;/octopress&rsquo; dir level will take the files in &lsquo;source&rsquo;, parse them in combination with your &lsquo;_config.yml&rsquo; file and generate static html content into the &lsquo;_deploy&rsquo; dir.</li>
<li><strong>/octopress/_deploy</strong> &ndash; This is the directory that Octopress will dynamically generate, it contains your actual website static HTML that people see. When you run &ldquo;rake deploy&rdquo; Octopress handles pushing all content from &lsquo;_deploy&rsquo; to the &lsquo;master&rsquo; branch of your github repo (i.e., the branch responsible for serving content).</li>
</ul>


<h2>Important Octopress Commands</h2>

<p>The following commands are the most useful for doing basic things with Octopress</p>

<p>```</p>

<h2>generates static html by parsing markdown in &lsquo;source&rsquo; directory, using &lsquo;_config.yml&rsquo; for configuration parameters</h2>

<p>rake generate</p>

<h2>deploys all content in &lsquo;_deploy&rsquo; to the &lsquo;master&rsquo; branch on your github repo</h2>

<p>rake deploy</p>

<h2>binds a webserver to localhost:4000 that serves pages from &lsquo;_deploy&rsquo;; watches for changes in &lsquo;source&rsquo; and auto-generates all changes into &lsquo;_deploy&rsquo;. Use this for local development.</h2>

<p>rake preview
```</p>

<p>That is it for now, still need to document how to perform development from multiple machines and how to rebuild your local development workstation if something goes wrong.</p>
]]></content>
  </entry>
  
</feed>
